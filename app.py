import os

import httpx
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, Field

app = FastAPI(title="Text Summarizer API", version="1.0.0")

# Configuration via environment with sensible defaults
OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434/api/generate")
MODEL_NAME = os.getenv("MODEL_NAME", "mistral:latest")
TIMEOUT_SECONDS = float(os.getenv("HTTP_TIMEOUT", "60"))

# Enable CORS for local development and broader use. Adjust origins as needed.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class SummarizeRequest(BaseModel):
    text: str = Field(..., description="Input text to summarize")
    bullets: int = Field(3, ge=1, le=10, description="Number of bullet points in the summary")

class SummarizeResponse(BaseModel):
    summary: str

@app.get("/")
async def root():
    return {"name": "Text Summarizer API", "version": "1.0.0"}

@app.get("/health")
async def health():
    # Simple health check; optionally could check upstream availability
    return {"status": "ok"}

@app.post("/summarize/", response_model=SummarizeResponse)
async def summarize_text(body: SummarizeRequest):
    prompt = f"Summarize the following text in {body.bullets} bullet points:\n\n{body.text}"
    payload = {"model": MODEL_NAME, "prompt": prompt, "stream": False}

    try:
        async with httpx.AsyncClient(timeout=TIMEOUT_SECONDS) as client:
            resp = await client.post(OLLAMA_URL, json=payload)
    except httpx.RequestError as e:
        raise HTTPException(status_code=503, detail=f"Upstream service unreachable: {e}")

    if resp.status_code != 200:
        # Surface upstream error text for debugging; in production, sanitize this.
        raise HTTPException(status_code=resp.status_code, detail=resp.text)

    try:
        data = resp.json()
    except ValueError:
        raise HTTPException(status_code=502, detail="Invalid JSON from upstream service")

    summary = data.get("response")
    if not summary:
        raise HTTPException(status_code=502, detail="No summary generated by upstream service")

    return SummarizeResponse(summary=summary)

# Run with: uvicorn app:app --reload
